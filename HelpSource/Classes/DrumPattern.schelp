TITLE:: DrumPattern
summary:: represents a drum machine pattern
categories:: Math, Patterns
related:: Classes/SomeRelatedClass, Reference/SomeRelatedStuff

DESCRIPTION::
DrumPattern supports arbitrary rhythmic patterns, and can generate rhythimc information in various ways, including as input to Patterns.

code::
s.boot;

a = DrumPattern.house;
a.kick; // [ 1, r, r, r, 1, r, r, r, 1, r, r, r, 1, r, r, r ]
a.sn; // [ r, r, r, r, 1, r, r, r, r, r, r, r, 1, r, r, r ]
a.oh; // [ r, r, 1, r, r, r, 1, r, r, r, 1, r, r, r, 1, r ] ]
a.cym; // [ 1, r, r, r, r, r, r, r, r, r, r, r, r, r, r, r ] ]

TempoClock.default.tempo = 142/60;
Pbind(\dur, 1/4, \octave, 3, \rhythm, Pseq(a.kick,inf)).play;
Pbind(\dur, 1/4, \octave, 5, \rhythm, Pseq(a.sn,inf)).play;
Pbind(\dur, 1/4, \octave, 4, \rhythm, Pseq(a.oh,inf)).play;
Pbind(\dur, 1/4, \octave, 7, \rhythm, Pseq(a.cym,inf)).play;
::

For a complete list of available patterns, execute
code::
DrumPattern.directory
::

CLASSMETHODS::

METHOD:: all
The drum pattern repository, to which new patterns can be added.

code::
DrumPattern.all.put(\catastrophic, DrumPattern(kick:[1,9], sn: [5,13]));
DrumPattern.at(\catastrophic).kick; // access to the drum pattern
::

METHOD:: names

METHOD:: initClass

METHOD:: new
Creates a new DrumPattern from scratch.  Patterns are created with arrays of Integers denoting beat positions where each instrument of the drum kit should hit.
argument:: kick
Array of Integers representing the pattern for the kick drum.
argument:: sn
Array of Integers representing the pattern for the snare drum.
argument:: ch
Array of Integers representing the pattern for the closed hat.
argument:: oh
Array of Integers representing the pattern for the open hat.
argument:: rim
Array of Integers representing the pattern for the rim shot.
argument:: cym
Array of Integers representing the pattern for the cymbals.
argument:: bell
Array of Integers representing the pattern for the percussion bells.
argument:: cl
Array of Integers representing the pattern for the claps.
argument:: sh
Array of Integers representing the pattern for the shake.
argument:: ht
Array of Integers representing the pattern for the high tom.
argument:: mt
Array of Integers representing the pattern for the mid tome.
argument:: lt
Array of Integers representing the pattern for the low tom.
argument:: acc
Array of Integers representing the pattern for the accents.
argument:: size
Number of beats in the pattern.  Defaults to 16.

code::
// set kick pattern to hit on beats 1 and 9
d = DrumPattern(kick:[1,9]);
d.kick; // [ 1, r, r, r, r, r, r, r, 1, r, r, r, r, r, r, r ]
::

METHOD:: directory
Complete list of available patterns.

METHOD:: newFromKey
argument:: key

METHOD:: doesNotUnderstand
argument:: selector
argument:: args

METHOD:: at
argument:: key
Access from the drum pattern repository.
code::
DrumPattern.at(\house);
DrumPattern.newFromKey(\house); // access a copy of the scale for modification
::

METHOD:: asArray
Converts an array of Integers representing the beat positions of the hits to an array of 1's and \rest's.
code::
DrumPattern.asArray([1,9]); // [ 1, r, r, r, r, r, r, r, 1, r, r, r, r, r, r, r ]
::

argument:: positions
Array of Integers representing beat positions.
argument:: size
Number of beats in the pattern.
code::
DrumPattern.asArray([1,3], size: 4);
// [ 1, r, 1, r ]
::
argument:: zeroIndex
If strong::true:: beat positions are 0-based.
If strong::false:: beat positions start counting from 1.
code::
DrumPattern.asArray([1,5], size:8, zeroIndex:false);
// [ 1, r, r, r, 1, r, r, r ]

DrumPattern.asArray([1,5], size:8, zeroIndex:true);
// [ r, 1, r, r, r, 1, r, r ]
::
argument:: defaultValue
Set this if you want \rest's to be something else.
code::
DrumPattern.asArray([1,9], defaultValue: 0);
// [ 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 ]
::
argument:: replaceValue
Set this if you want 1's to be something else.
code::
DrumPattern.asArray([1,9], replaceValue: 2);
// [ 2, r, r, r, r, r, r, r, 2, r, r, r, r, r, r, r ]
::

INSTANCEMETHODS::

METHOD:: pattern
Returns the drum pattern.

METHOD:: doesNotUnderstand
argument:: selector
argument:: args

METHOD:: newFromKey
argument:: key

METHOD:: at
Get the pattern of any of the instruments.
argument:: key
The instrument symbol: \kick, \sn, \ch, \oh, \rim, ...
code::
a = DrumPattern.house;
a.at(\kick);
// same as
a.kick;
::

EXAMPLES::

code::
s.boot;

(
SynthDef(\dpkick, {
	var sig, env;
	env = EnvGen.kr(Env.perc, \gate.kr(1), doneAction:2);
	sig = SinOscFB.ar(50!2, env, \amp.kr(0.2));
	Out.ar(\out.kr(0), sig * env);
}).add;

SynthDef(\dpsn, {
	var sig, env;
	env = EnvGen.kr(Env.perc(0.01,0.1), \gate.kr(1), doneAction:2);
	sig = WhiteNoise.ar(\amp.kr(0.2));
	Out.ar(\out.kr(0), sig * env);
}).add;
)

a = DrumPattern.impeach;
a.kick; // [ 1, r, r, r, 1, r, r, r, 1, r, r, r, 1, r, r, r ]
a.sn; // [ r, r, r, r, 1, r, r, r, r, r, r, r, 1, r, r, r ]

TempoClock.default.tempo = 142/60;
(
Pbind(\instrument, \dpkick, \dur, 1/4, \rhythm, Pseq(a.kick,inf)).play;
Pbind(\instrument, \dpsn, \dur, 1/4, \rhythm, Pseq(a.sn,inf)).play;
)
::

